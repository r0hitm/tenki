{"mappings":"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","sources":["src/index.js"],"sourcesContent":["// Uses OpenWeatherMap API to fetch weather data for a given city\n// and displays it on the page.\n// Author: Rohit Mehta\n\nconst API_KEY = \"f0c5c05c6f612287042904ba9e1d65a5\";\nconst WEATHER_API = \"https://api.openweathermap.org/data/2.5/weather\";\nconst GEOCODE_API = \"https://api.openweathermap.org/geo/1.0/direct\";\nconst WEATHER_ICON_API = \"https://openweathermap.org/img/wn\";\n\nconst weatherData = {\n    city: \"\",\n    lat: 0,\n    lon: 0,\n    desc: \"\",\n    iconCode: \"\",\n    temp: 0,\n    tempUnit: \"C\",\n    wind: 0,\n    windUnit: \"m/s\",\n    pressure: 0,\n    pressureUnit: \"hPa\",\n    humidity: 0,\n    toMetric: function () {\n        this.temp = (this.temp - 32) / 1.8; // Convert to C\n        this.temp = Math.round((this.temp + Number.EPSILON) * 100) / 100;\n        this.tempUnit = \"C\";\n        this.wind = this.wind / 2.237; // Convert to m/s\n        this.wind = Math.round((this.wind + Number.EPSILON) * 100) / 100;\n        this.windUnit = \"m/s\";\n        // this.pressureUnit = \"hPa\";\n    },\n    toImperial: function () {\n        this.temp = this.temp * 1.8 + 32; // Convert to F\n        this.temp = Math.round((this.temp + Number.EPSILON) * 100) / 100;\n        this.tempUnit = \"F\";\n        this.wind = this.wind * 2.237; // Convert to mph\n        this.wind = Math.round((this.wind + Number.EPSILON) * 100) / 100;\n        this.windUnit = \"mph\";\n    },\n};\n\n// DOM Elements\nconst searchForm = document.getElementById(\"search\");\nconst city = document.getElementById(\"city\");\nconst wIcon = document.getElementById(\"w-desc-icon\");\nconst wDesc = document.getElementById(\"w-desc\");\nconst wTemp = document.getElementById(\"w-temp\");\nconst wTempC = document.getElementById(\"w-temp-unit-c\");\nconst wTempF = document.getElementById(\"w-temp-unit-f\");\nconst wHumidity = document.getElementById(\"w-humidity\");\nconst wWind = document.getElementById(\"w-wind\");\nconst wPressure = document.getElementById(\"w-pressure\");\n\nwTempC.addEventListener(\"click\", () => {\n    weatherData.toImperial();\n    wTempC.classList.add(\"hidden\");\n    wTempF.classList.remove(\"hidden\");\n    updateDOM();\n});\n\nwTempF.addEventListener(\"click\", () => {\n    weatherData.toMetric();\n    wTempF.classList.add(\"hidden\");\n    wTempC.classList.remove(\"hidden\");\n    updateDOM();\n});\n\n\n// Async function to fetch data from the given API\n\n// Fetch weather data for the given city and update the weatherData object\nasync function fetchWeatherData(q) {\n    // Fetch coordinates for the given city,q\n    let url = `${GEOCODE_API}?q=${q}&limit=1&appid=${API_KEY}`;\n    let res = await fetch(url);\n    let data = await res.json();\n    const { name, lat, lon } = data[0];\n\n    // const metric = weatherData.tempUnit === \"C\" ? \"metric\" : \"imperial\";\n    url = `${WEATHER_API}?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}`;\n    res = await fetch(url);\n    data = await res.json();\n    const { weather, main, wind } = data;\n\n    weatherData.city = name;\n    weatherData.lat = lat;\n    weatherData.lon = lon;\n    weatherData.desc = weather[0].main;\n    weatherData.iconCode = weather[0].icon;\n    weatherData.temp = main.temp;\n    weatherData.humidity = main.humidity;\n    weatherData.wind = wind.speed;\n    weatherData.pressure = main.pressure;\n    // return weatherData;\n}\n\n// Event Listeners\nsearchForm.addEventListener(\"submit\", async e => {\n    e.preventDefault();\n    const q = searchForm.q.value; // Default city\n    // console.log(q);\n    searchForm.reset();\n\n    // Fetch coordinates for the given city,q\n    // and then fetch weather data for the coordinates\n    // Note: fetch stores the data in the weatherData object, so we don't need to return anything\n    try {\n        await fetchWeatherData(q);\n    } catch (err) {\n        console.log(err);\n    }\n\n    console.log(weatherData);\n\n    updateDOM();\n});\n\n// Update the dom elements with the weatherData\nconst updateDOM = _ => {\n    // Display weather data\n    city.textContent = weatherData.city;\n    wDesc.textContent = weatherData.desc;\n    wTemp.textContent = weatherData.temp;\n    wHumidity.textContent = weatherData.humidity;\n    wWind.textContent = weatherData.wind + \" \" + weatherData.windUnit;\n    wPressure.textContent =\n        weatherData.pressure + \" \" + weatherData.pressureUnit;\n    // wIcon.setAttribute('src', `https://openweathermap.org/img/wn/${weatherData.iconCode}.png`);\n    wIcon.src = `https://openweathermap.org/img/wn/${weatherData.iconCode}.png`;\n}\n\n// Load the default weather location \"New Delhi\"  on load\n(async _ => {\n    await fetchWeatherData(\"New Delhi\");\n    updateDOM();\n})();"],"names":[],"version":3,"file":"index.579125c3.js.map","sourceRoot":"/__parcel_source_root/"}