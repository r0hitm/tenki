{"mappings":"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","sources":["src/index.js"],"sourcesContent":["// Uses OpenWeatherMap API to fetch weather data for a given city\n// and displays it on the page.\n// Author: Rohit Mehta\n\nconst API_KEY = \"f0c5c05c6f612287042904ba9e1d65a5\";\nconst WEATHER_API = \"https://api.openweathermap.org/data/2.5/weather\";\nconst GEOCODE_API = \"https://api.openweathermap.org/geo/1.0/direct\";\nconst WEATHER_ICON_API = \"https://openweathermap.org/img/wn\";\n\nconst weatherData = {\n    city: \"\",\n    lat: 0,\n    lon: 0,\n    desc: \"\",\n    iconCode: \"\",\n    temp: 0,\n    tempUnit: \"C\",\n    wind: 0,\n    windUnit: \"m/s\",\n    pressure: 0,\n    pressureUnit: \"hPa\",\n    humidity: 0,\n    toMetric: function () {\n        this.temp = (this.temp - 32) / 1.8; // Convert to C\n        this.temp = Math.round((this.temp + Number.EPSILON) * 100) / 100;\n        this.tempUnit = \"C\";\n        this.wind = this.wind / 2.237; // Convert to m/s\n        this.wind = Math.round((this.wind + Number.EPSILON) * 100) / 100;\n        this.windUnit = \"m/s\";\n        // this.pressureUnit = \"hPa\";\n    },\n    toImperial: function () {\n        this.temp = this.temp * 1.8 + 32; // Convert to F\n        this.temp = Math.round((this.temp + Number.EPSILON) * 100) / 100;\n        this.tempUnit = \"F\";\n        this.wind = this.wind * 2.237; // Convert to mph\n        this.wind = Math.round((this.wind + Number.EPSILON) * 100) / 100;\n        this.windUnit = \"mph\";\n    },\n};\n\n// DOM Elements\nconst searchForm = document.getElementById(\"search\");\nconst city = document.getElementById(\"city\");\nconst wIcon = document.getElementById(\"w-desc-icon\");\nconst wDesc = document.getElementById(\"w-desc\");\nconst wTemp = document.getElementById(\"w-temp\");\nconst wTempC = document.getElementById(\"w-temp-unit-c\");\nconst wTempF = document.getElementById(\"w-temp-unit-f\");\nconst wHumidity = document.getElementById(\"w-humidity\");\nconst wWind = document.getElementById(\"w-wind\");\nconst wPressure = document.getElementById(\"w-pressure\");\n\nwTempC.addEventListener(\"click\", () => {\n    weatherData.toImperial();\n    wTempC.classList.add(\"hidden\");\n    wTempF.classList.remove(\"hidden\");\n    updateDOM();\n});\n\nwTempF.addEventListener(\"click\", () => {\n    weatherData.toMetric();\n    wTempF.classList.add(\"hidden\");\n    wTempC.classList.remove(\"hidden\");\n    updateDOM();\n});\n\n\n// Async function to fetch data from the given API\n\n// Fetch weather data for the given city and update the weatherData object\nasync function fetchWeatherData(q) {\n    // Fetch coordinates for the given city,q\n    let url = `${GEOCODE_API}?q=${q}&limit=1&appid=${API_KEY}`;\n    let res = await fetch(url);\n    let data = await res.json();\n    const { name, lat, lon } = data[0];\n\n    // const metric = weatherData.tempUnit === \"C\" ? \"metric\" : \"imperial\";\n    url = `${WEATHER_API}?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}`;\n    res = await fetch(url);\n    data = await res.json();\n    const { weather, main, wind } = data;\n\n    weatherData.city = name;\n    weatherData.lat = lat;\n    weatherData.lon = lon;\n    weatherData.desc = weather[0].main;\n    weatherData.iconCode = weather[0].icon;\n    weatherData.temp = main.temp;\n    weatherData.humidity = main.humidity;\n    weatherData.wind = wind.speed;\n    weatherData.pressure = main.pressure;\n    // return weatherData;\n}\n\n// Event Listeners\nsearchForm.addEventListener(\"submit\", async e => {\n    e.preventDefault();\n    const q = searchForm.q.value; // Default city\n    // console.log(q);\n    searchForm.reset();\n\n    // Fetch coordinates for the given city,q\n    // and then fetch weather data for the coordinates\n    // Note: fetch stores the data in the weatherData object, so we don't need to return anything\n    try {\n        await fetchWeatherData(q);\n    } catch (err) {\n        console.log(err);\n    }\n\n    console.log(weatherData);\n\n    updateDOM();\n});\n\n// Update the dom elements with the weatherData\nconst updateDOM = _ => {\n    // Display weather data\n    city.textContent = weatherData.city;\n    wDesc.textContent = weatherData.desc;\n    wTemp.textContent = weatherData.temp;\n    wHumidity.textContent = weatherData.humidity;\n    wWind.textContent = weatherData.wind + \" \" + weatherData.windUnit;\n    wPressure.textContent =\n        weatherData.pressure + \" \" + weatherData.pressureUnit;\n    // wIcon.setAttribute('src', `https://openweathermap.org/img/wn/${weatherData.iconCode}.png`);\n    wIcon.src = `https://openweathermap.org/img/wn/${weatherData.iconCode}.png`;\n}\n\n// Load the default weather location \"New Delhi\"  on load\n(async _ => {\n    await fetchWeatherData(\"New Delhi\");\n    updateDOM();\n})();"],"names":["API_KEY","WEATHER_API","GEOCODE_API","WEATHER_ICON_API","weatherData","city","lat","lon","desc","iconCode","temp","tempUnit","wind","windUnit","pressure","pressureUnit","humidity","toMetric","this","Math","round","Number","EPSILON","toImperial","searchForm","document","getElementById","wIcon","wDesc","wTemp","wTempC","wTempF","wHumidity","wWind","wPressure","async","fetchWeatherData","q","url","res","fetch","data","json","name","weather","main","icon","speed","addEventListener","classList","add","remove","updateDOM","e","preventDefault","value","reset","err","console","log","_","textContent","src"],"version":3,"file":"index.a6229c8a.js.map"}